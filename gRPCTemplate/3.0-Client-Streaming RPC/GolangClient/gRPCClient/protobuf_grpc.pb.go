// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: protobuf.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ClientStreamingRPC_Test_FullMethodName = "/gprc.ClientStreamingRPC/Test"
)

// ClientStreamingRPCClient is the client API for ClientStreamingRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientStreamingRPCClient interface {
	Test(ctx context.Context, opts ...grpc.CallOption) (ClientStreamingRPC_TestClient, error)
}

type clientStreamingRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewClientStreamingRPCClient(cc grpc.ClientConnInterface) ClientStreamingRPCClient {
	return &clientStreamingRPCClient{cc}
}

func (c *clientStreamingRPCClient) Test(ctx context.Context, opts ...grpc.CallOption) (ClientStreamingRPC_TestClient, error) {
	stream, err := c.cc.NewStream(ctx, &ClientStreamingRPC_ServiceDesc.Streams[0], ClientStreamingRPC_Test_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &clientStreamingRPCTestClient{stream}
	return x, nil
}

type ClientStreamingRPC_TestClient interface {
	Send(*Request) error
	CloseAndRecv() (*Reply, error)
	grpc.ClientStream
}

type clientStreamingRPCTestClient struct {
	grpc.ClientStream
}

func (x *clientStreamingRPCTestClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clientStreamingRPCTestClient) CloseAndRecv() (*Reply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Reply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientStreamingRPCServer is the server API for ClientStreamingRPC service.
// All implementations must embed UnimplementedClientStreamingRPCServer
// for forward compatibility
type ClientStreamingRPCServer interface {
	Test(ClientStreamingRPC_TestServer) error
	mustEmbedUnimplementedClientStreamingRPCServer()
}

// UnimplementedClientStreamingRPCServer must be embedded to have forward compatible implementations.
type UnimplementedClientStreamingRPCServer struct {
}

func (UnimplementedClientStreamingRPCServer) Test(ClientStreamingRPC_TestServer) error {
	return status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (UnimplementedClientStreamingRPCServer) mustEmbedUnimplementedClientStreamingRPCServer() {}

// UnsafeClientStreamingRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientStreamingRPCServer will
// result in compilation errors.
type UnsafeClientStreamingRPCServer interface {
	mustEmbedUnimplementedClientStreamingRPCServer()
}

func RegisterClientStreamingRPCServer(s grpc.ServiceRegistrar, srv ClientStreamingRPCServer) {
	s.RegisterService(&ClientStreamingRPC_ServiceDesc, srv)
}

func _ClientStreamingRPC_Test_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClientStreamingRPCServer).Test(&clientStreamingRPCTestServer{stream})
}

type ClientStreamingRPC_TestServer interface {
	SendAndClose(*Reply) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type clientStreamingRPCTestServer struct {
	grpc.ServerStream
}

func (x *clientStreamingRPCTestServer) SendAndClose(m *Reply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clientStreamingRPCTestServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientStreamingRPC_ServiceDesc is the grpc.ServiceDesc for ClientStreamingRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientStreamingRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gprc.ClientStreamingRPC",
	HandlerType: (*ClientStreamingRPCServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Test",
			Handler:       _ClientStreamingRPC_Test_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "protobuf.proto",
}
