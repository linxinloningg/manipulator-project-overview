// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: protobuf.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BidirectionalStreamingRPC_Test_FullMethodName = "/gprc.BidirectionalStreamingRPC/Test"
)

// BidirectionalStreamingRPCClient is the client API for BidirectionalStreamingRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BidirectionalStreamingRPCClient interface {
	Test(ctx context.Context, opts ...grpc.CallOption) (BidirectionalStreamingRPC_TestClient, error)
}

type bidirectionalStreamingRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewBidirectionalStreamingRPCClient(cc grpc.ClientConnInterface) BidirectionalStreamingRPCClient {
	return &bidirectionalStreamingRPCClient{cc}
}

func (c *bidirectionalStreamingRPCClient) Test(ctx context.Context, opts ...grpc.CallOption) (BidirectionalStreamingRPC_TestClient, error) {
	stream, err := c.cc.NewStream(ctx, &BidirectionalStreamingRPC_ServiceDesc.Streams[0], BidirectionalStreamingRPC_Test_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &bidirectionalStreamingRPCTestClient{stream}
	return x, nil
}

type BidirectionalStreamingRPC_TestClient interface {
	Send(*Request) error
	Recv() (*Reply, error)
	grpc.ClientStream
}

type bidirectionalStreamingRPCTestClient struct {
	grpc.ClientStream
}

func (x *bidirectionalStreamingRPCTestClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bidirectionalStreamingRPCTestClient) Recv() (*Reply, error) {
	m := new(Reply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BidirectionalStreamingRPCServer is the server API for BidirectionalStreamingRPC service.
// All implementations must embed UnimplementedBidirectionalStreamingRPCServer
// for forward compatibility
type BidirectionalStreamingRPCServer interface {
	Test(BidirectionalStreamingRPC_TestServer) error
	mustEmbedUnimplementedBidirectionalStreamingRPCServer()
}

// UnimplementedBidirectionalStreamingRPCServer must be embedded to have forward compatible implementations.
type UnimplementedBidirectionalStreamingRPCServer struct {
}

func (UnimplementedBidirectionalStreamingRPCServer) Test(BidirectionalStreamingRPC_TestServer) error {
	return status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (UnimplementedBidirectionalStreamingRPCServer) mustEmbedUnimplementedBidirectionalStreamingRPCServer() {
}

// UnsafeBidirectionalStreamingRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BidirectionalStreamingRPCServer will
// result in compilation errors.
type UnsafeBidirectionalStreamingRPCServer interface {
	mustEmbedUnimplementedBidirectionalStreamingRPCServer()
}

func RegisterBidirectionalStreamingRPCServer(s grpc.ServiceRegistrar, srv BidirectionalStreamingRPCServer) {
	s.RegisterService(&BidirectionalStreamingRPC_ServiceDesc, srv)
}

func _BidirectionalStreamingRPC_Test_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BidirectionalStreamingRPCServer).Test(&bidirectionalStreamingRPCTestServer{stream})
}

type BidirectionalStreamingRPC_TestServer interface {
	Send(*Reply) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type bidirectionalStreamingRPCTestServer struct {
	grpc.ServerStream
}

func (x *bidirectionalStreamingRPCTestServer) Send(m *Reply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bidirectionalStreamingRPCTestServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BidirectionalStreamingRPC_ServiceDesc is the grpc.ServiceDesc for BidirectionalStreamingRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BidirectionalStreamingRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gprc.BidirectionalStreamingRPC",
	HandlerType: (*BidirectionalStreamingRPCServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Test",
			Handler:       _BidirectionalStreamingRPC_Test_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protobuf.proto",
}
